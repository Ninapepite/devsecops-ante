name: CI/CD Pipeline PHP en production

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Vérifier le code depuis le dépôt
      - name: Checkout code
        uses: actions/checkout@v2

      # Configurer PHP 8.2 avec les extensions nécessaires et outils pour l'analyse statique
      - name: Set up PHP 8.2 and tools for static analysis
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql
          tools: phpstan

      # Installer les dépendances du projet
      - name: Install dependencies
        run: composer install

      # Exécuter les tests unitaires avec PHPUnit
      - name: Run tests
        run: php bin/phpunit

      # Effectuer une analyse statique du code avec PHPStan
      - name: Static code analysis
        run: vendor/bin/phpstan analyse

      # Effectuer un scan de sécurité du code avec Trivy
      - name: Security scan with Trivy
        run: trivy fs .

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Vérifier le code depuis le dépôt
      - name: Checkout code
        uses: actions/checkout@v2

      # Se connecter à Docker Hub en utilisant les identifiants stockés dans les secrets
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Construire l'image Docker
      - name: Build Docker image
        run: docker build -t phpapp:latest .

      # Effectuer un scan de sécurité de l'image Docker avec Trivy
      - name: Docker image security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: phpapp:latest

      # Pousser l'image Docker vers le registre
      - name: Push Docker image to registry
        run: docker push phpapp:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Vérifier le code depuis le dépôt
      - name: Checkout code
        uses: actions/checkout@v2

      # Déployer l'application sur l'environnement de staging avec Docker Compose
      - name: Deploy to Staging
        run: |
          echo "version: '3.8'

          services:
            phpapp:
              image: phpapp:latest
              ports:
                - '8080:80'
              environment:
                DATABASE_URL: mysql://symfony:symfony@db:3306/symfony
                REDIS_URL: redis://redis:6379
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: symfony
                MYSQL_USER: symfony
                MYSQL_PASSWORD: symfony
              depends_on:
                - db
                - redis

            db:
              image: mariadb:latest
              environment:
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: symfony
                MYSQL_USER: symfony
                MYSQL_PASSWORD: symfony

            redis:
              image: redis:latest
          " > docker-compose.staging.yml
          docker-compose -f docker-compose.staging.yml up -d

      # Effectuer une analyse dynamique du code avec SonarQube
      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v1.5
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=phpapp -Dsonar.organization=myorganization -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      # Vérifier le code depuis le dépôt
      - name: Checkout code
        uses: actions/checkout@v2

      # Déployer l'application sur l'environnement de production via SSH
      - name: Deploy to Production via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            cd /path/to/your/project
            docker-compose down
            docker-compose pull
            docker-compose up -d
